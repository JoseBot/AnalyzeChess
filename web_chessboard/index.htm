<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <title>JoseBot Chess Board</title>
  

  <link rel="stylesheet" href="css/chessboard.css" />


	<script src="js/json3.min.js"></script>
	<script src="js/jquery-1.10.1.min.js"></script>
	<script src="js/chessboard.js"></script>


</head>

<body>

<p><a href="/"><img src="./img/JoseBotLogo.png" width=50  height=50  align="absmiddle"></a>
<font size=5 face="verdana" color="6C3365">
<b>JoseBot Chess Board!</b>
</font>
<br>
<a href="setupChessBoard.htm">Setup Chess Board  </a>

<img src="./img/chip.jpg" width="19" height="19" align="absmiddle"> <a href="http://analysis.cpuchess.com"> Analysis This!</a>
</p>



<!-- start example HTML --->
	<script src="js/chess.min.js"></script>
	<div id="board" style="width: 500px"></div>

	<p>Status: <span id="status"></span></p>
	<p>FEN: <span id="fen"></span></p>
	<p>PGN: <span id="pgn"></span></p>

<!-- end example HTML --->




<script>
var init = function() {

//--- start example JS ---
var board,
  game = new Chess(),
  statusEl = $('#status'),
  fenEl = $('#fen'),
  pgnEl = $('#pgn');

// do not pick up pieces if the game is over
// only pick up pieces for the side to move
var onDragStart = function(source, piece, position, orientation) {
  if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
    return false;
  }
};

var onDrop = function(source, target) {
  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  });

  // illegal move
  if (move === null) return 'snapback';

  updateStatus();
};

// update the board position after the piece snap 
// for castling, en passant, pawn promotion
var onSnapEnd = function() {
  board.position(game.fen());
};

var updateStatus = function() {
  var status = '';

  var moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  }

  // draw?
  else if (game.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  statusEl.html(status);
  fenEl.html(game.fen());
  pgnEl.html(game.pgn());
};

var cfg = {
  draggable: true,
  position: 'start',
  onDragStart: onDragStart,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd
};
board = ChessBoard('board', cfg);

updateStatus();
//--- end example JS ---

}; // end init()
$(document).ready(init);
</script>

</body>
</html>